{"ast":null,"code":"var _jsxFileName = \"/Users/ordideclement/Documents/fil_rouge_react/mon_fil/mon-fil/src/components/Pays.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport Card from \"./Card\"; // pour les (((usestate)))) il faut importer {useState}  pareil pour le useeffect\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Pays = () => {\n  _s();\n\n  // pour le use state : la premeire valeur =la valeur du state\n  //seconde valeur = foction qui peut mettre a jour le state et qui peut etre initialiser a zero\n  const [data, setData] = useState([]); // le use effect est un hook qui permet de la performance et qui permet de contenir\n  //le tout dans un useeffect avec les crochet[] a la  fin qui signifie qui dit que tu joues \n  //tout le temps que si il y a des changements dans le call back crochet\n\n  const [sortedData, setSortedData] = useState([]); // cette fonction va servir pour mettre dans l ordre les pays  du plus peuplé au moins peuplé  const [sortedData, setSortedData] = useState([]);\n\n  const [playOnce, setPlayOnce] = useState(true);\n  const [rangeValue, setRangeValue] = useState(3);\n  const [selectedRadio, setSelectedRadio] = useState(\"\");\n  const radios = [\"Africa\", \"America\", \"Asia\", \"Europe\", \"Oceania\"];\n  useEffect(() => {\n    if (playOnce) {\n      axios.get(\"https://restcountries.eu/rest/v2/all?fields=name;population;region;capital;flag\").then(res => {\n        setData(res.data);\n        setPlayOnce(false);\n      });\n    }\n\n    const sortedCountry = () => {\n      // sur la const countryObjet on vient de transformer notre array en objet\n      const countryObj = Object.keys(data).map(i => data[i]); // const sortedArray grace a la methode moderne de javascript on fait un tri avec return b.population - a.population;\n\n      const sortedArray = countryObj.sort((a, b) => {\n        return b.population - a.population;\n      });\n      sortedArray.length = rangeValue;\n      setSortedData(sortedArray);\n    };\n\n    sortedCountry();\n  }, [data, rangeValue, playOnce]); // call back  tableau[]\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"pays\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"sort-countainer\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"range\",\n          min: \"1\",\n          max: \"250\",\n          value: rangeValue,\n          onChange: e => setRangeValue(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: radios.map(radio => {\n            return /*#__PURE__*/_jsxDEV(\"li\", {\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"radio\",\n                value: radio,\n                id: radio,\n                checked: radio === selectedRadio,\n                onChange: e => setSelectedRadio(e.target.value)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 62,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                htmlFor: radio,\n                children: radio\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 65,\n                columnNumber: 37\n              }, this)]\n            }, radio, true, {\n              fileName: _jsxFileName,\n              lineNumber: 61,\n              columnNumber: 33\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"cancel\",\n        children: selectedRadio && /*#__PURE__*/_jsxDEV(\"h5\", {\n          onClick: () => setSelectedRadio(\"\"),\n          children: \"Annuler recherche\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 39\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"pays_liste\",\n        children: sortedData.filter(country => country.region.includes(selectedRadio)).map(country => /*#__PURE__*/_jsxDEV(Card, {\n          country: country\n        }, country.name, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 29\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 9\n  }, this);\n}; // country est une props     exemple du dessus    <Card country={country} key={country.name} />\n\n\n_s(Pays, \"yAnVDkcf99PRFzfILn0TV8RZ0YQ=\");\n\n_c = Pays;\nexport default Pays;\n\nvar _c;\n\n$RefreshReg$(_c, \"Pays\");","map":{"version":3,"sources":["/Users/ordideclement/Documents/fil_rouge_react/mon_fil/mon-fil/src/components/Pays.js"],"names":["React","useState","useEffect","axios","Card","Pays","data","setData","sortedData","setSortedData","playOnce","setPlayOnce","rangeValue","setRangeValue","selectedRadio","setSelectedRadio","radios","get","then","res","sortedCountry","countryObj","Object","keys","map","i","sortedArray","sort","a","b","population","length","e","target","value","radio","filter","country","region","includes","name"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\"\nimport Card from \"./Card\";\n// pour les (((usestate)))) il faut importer {useState}  pareil pour le useeffect\n\nconst Pays = () => {\n    // pour le use state : la premeire valeur =la valeur du state\n    //seconde valeur = foction qui peut mettre a jour le state et qui peut etre initialiser a zero\n    const [data, setData] = useState([]);\n    // le use effect est un hook qui permet de la performance et qui permet de contenir\n    //le tout dans un useeffect avec les crochet[] a la  fin qui signifie qui dit que tu joues \n    //tout le temps que si il y a des changements dans le call back crochet\n\n\n\n    const [sortedData, setSortedData] = useState([]);\n    // cette fonction va servir pour mettre dans l ordre les pays  du plus peuplé au moins peuplé  const [sortedData, setSortedData] = useState([]);\n\n    const [playOnce, setPlayOnce] = useState(true);\n    const [rangeValue, setRangeValue] = useState(3);\n\n    const [selectedRadio, setSelectedRadio] = useState(\"\");\n    const radios = [\"Africa\", \"America\", \"Asia\", \"Europe\", \"Oceania\"]\n    useEffect(() => {\n\n\n        if (playOnce) {\n            axios\n                .get(\n                    \"https://restcountries.eu/rest/v2/all?fields=name;population;region;capital;flag\"\n                )\n                .then((res) => {\n                    setData(res.data);\n                    setPlayOnce(false);\n                });\n        }\n\n        const sortedCountry = () => {\n            // sur la const countryObjet on vient de transformer notre array en objet\n            const countryObj = Object.keys(data).map((i) => data[i]);\n            // const sortedArray grace a la methode moderne de javascript on fait un tri avec return b.population - a.population;\n            const sortedArray = countryObj.sort((a, b) => {\n                return b.population - a.population;\n            });\n            sortedArray.length = rangeValue;\n            setSortedData(sortedArray)\n        };\n        sortedCountry();\n    }, [data, rangeValue, playOnce]);\n    // call back  tableau[]\n    return (\n        <div>\n            <div className=\"pays\">\n                <div className=\"sort-countainer\">\n\n                    <input type=\"range\" min=\"1\" max=\"250\" value={rangeValue} onChange={(e) => setRangeValue(e.target.value)} />\n\n                    <ul>\n                        {radios.map((radio) => {\n                            return (\n                                <li key={radio}>\n                                    <input type=\"radio\" value={radio} id={radio}\n                                        checked={radio === selectedRadio}\n                                        onChange={(e) => setSelectedRadio(e.target.value)} />\n                                    <label htmlFor={radio}>{radio}</label>\n                                </li>\n                            )\n                        })}\n                    </ul>\n\n                </div>\n                <div className=\"cancel\">\n                    {selectedRadio && <h5 onClick={() => setSelectedRadio(\"\")}>\n\n                        Annuler recherche</h5>}\n                </div>\n                <ul className=\"pays_liste\">\n                    {sortedData\n                        .filter((country => country.region.includes(selectedRadio)))\n                        .map((country) => (\n\n                            <Card country={country} key={country.name} />\n                        ))}\n\n\n\n                </ul>\n            </div>\n        </div>\n    );\n\n};\n\n// country est une props     exemple du dessus    <Card country={country} key={country.name} />\nexport default Pays;"]},"metadata":{},"sourceType":"module"}